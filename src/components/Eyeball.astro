---
---

<div class="eyeball-container" id="eyeball-container">
  <div class="eyeball" id="eyeball">
    <div class="veins"></div>
    <div class="sclera"></div>
    <div class="pupil" id="pupil"></div>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const pupil = document.getElementById('pupil');
    const eyeball = document.getElementById('eyeball');
    const eyeballContainer = document.getElementById('eyeball-container');
    
    if (pupil && eyeball && eyeballContainer) {
      // Set initial position randomly on screen
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const initialX = Math.random() * (screenWidth - 200) + 100;
      const initialY = Math.random() * (screenHeight - 200) + 100;
      
      // Initialize position with fixed positioning to avoid scroll issues
      eyeballContainer.style.position = 'fixed';
      eyeballContainer.style.top = initialY + 'px';
      eyeballContainer.style.left = initialX + 'px';
      
      // Variables for movement
      let targetX = initialX;
      let targetY = initialY;
      let currentX = initialX;
      let currentY = initialY;
      let lastMoveTime = 0;
      let ambientPhase = 0;
      let isMobile = false;
      
      // Stage system variables
      let stageLevel = 0; // 0=default, 1=alert, 2=avoidant, 3=fleeing, 4=erratic
      let lastStageChange = 0;
      let isTransitioning = false;
      
      // Check if device is mobile
      isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      // Constants
      const moveSpeed = 0.08;
      const repositionChance = 0.005;
      const ambientSpeed = 0.003;
      const ambientRadius = 8;
      
      // Size configuration
      const sizesRange = {
        min: 30,
        max: 60,
        default: 40
      };
      let currentSize = sizesRange.default;
      
      // Function to set a random size
      function setRandomSize() {
        currentSize = Math.floor(Math.random() * (sizesRange.max - sizesRange.min + 1)) + sizesRange.min;
        eyeballContainer.style.width = `${currentSize}px`;
        eyeballContainer.style.height = `${currentSize}px`;
      }
      
      // Function to update pupil position - with stage-based behavior
      function updatePupilPosition(pointerX, pointerY) {
        // Get eye center
        const eyeRect = eyeball.getBoundingClientRect();
        const eyeCenterX = eyeRect.left + eyeRect.width / 2;
        const eyeCenterY = eyeRect.top + eyeRect.height / 2;
        
        // Calculate angle and distance
        const deltaX = pointerX - eyeCenterX;
        const deltaY = pointerY - eyeCenterY;
        const angle = Math.atan2(deltaY, deltaX);
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        // Base variables for pupil behavior
        let pupilScale = 1.0;
        let trembleEffect = '';
        let finalAngle = angle;
        let finalPupilX, finalPupilY;
        
        // STAGE-SPECIFIC BEHAVIOR
        // Stage 0: Default - calm following within relaxed bounds
        // Stage 1: Alert - faster movement, larger range
        // Stage 2: Avoidant - glances away when cursor gets close
        // Stage 3: Fleeing - jumps to opposite edge
        // Stage 4: Erratic - trembles and avoids aggressively
        
        // Movement range increases with each stage
        const movementRangeByStage = [0.7, 0.85, 0.9, 0.95, 0.98];
        const edgeBuffer = 2;
        
        // Determine base pupil radius based on stage
        const baseRadius = (eyeRect.width / 2) * movementRangeByStage[stageLevel];
        const pupilMaxRadius = Math.max(0, baseRadius - (pupil.offsetWidth / 2));
        
        // Distance thresholds decrease with stages - eye gets more sensitive
        const closeThresholdByStage = [200, 180, 150, 120, 100];
        const closeThreshold = closeThresholdByStage[stageLevel];
        
        // Calculate closeness factor
        const closenessFactor = distance < closeThreshold ? 
          (1 - Math.max(0.2, distance / closeThreshold)) : 0;
        
        // STAGE-SPECIFIC PUPIL MOVEMENT
        if (stageLevel === 0) {
          // STAGE 0: Calm following
          const intensity = Math.min(1, distance / 250);
          finalPupilX = Math.cos(angle) * pupilMaxRadius * intensity;
          finalPupilY = Math.sin(angle) * pupilMaxRadius * intensity;
          
          pupilScale = isMobile ? 1.1 : 1.0;
          if (distance < closeThreshold) {
            pupilScale = isMobile ? 
              (1.1 - (closenessFactor * 0.2)) : 
              (1.0 - (closenessFactor * 0.2));
          }
        } 
        else if (stageLevel === 1) {
          // STAGE 1: Alert - faster tracking, more responsive
          const intensity = Math.min(1, distance / 200);
          finalPupilX = Math.cos(angle) * pupilMaxRadius * intensity * 1.2;
          finalPupilY = Math.sin(angle) * pupilMaxRadius * intensity * 1.2;
          
          // More reactive pupil size changes
          if (distance < closeThreshold) {
            pupilScale = isMobile ? 
              (0.9 - (closenessFactor * 0.3)) : 
              (0.8 - (closenessFactor * 0.3));
            
            // Slight trembling when close
            const trembleAmplitude = closenessFactor * 1.5;
            const noiseX = Math.sin(Date.now() * 0.03) * trembleAmplitude;
            const noiseY = Math.cos(Date.now() * 0.04) * trembleAmplitude;
            trembleEffect = `translate(${noiseX}px, ${noiseY}px)`;
          } else {
            const farFactor = Math.min(1, (distance - closeThreshold) / 300);
            pupilScale = isMobile ? 
              (1.1 + (farFactor * 0.2)) : 
              (1.0 + (farFactor * 0.2));
          }
        }
        else if (stageLevel === 2) {
          // STAGE 2: Avoidant - looks away when cursor gets close
          if (distance < closeThreshold) {
            // Glance away from cursor when close
            const avoidanceStrength = closenessFactor * 0.7; // How strongly it avoids
            const glanceOffset = Math.PI * avoidanceStrength; // Up to 90-degree glance away
            
            // Compute avoidance angle - mix between following and avoiding
            finalAngle = angle + glanceOffset;
            
            // Use a higher intensity when avoiding
            const intensity = Math.min(1, distance / 150) * (1 + avoidanceStrength);
            finalPupilX = Math.cos(finalAngle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(finalAngle) * pupilMaxRadius * intensity;
            
            // Smaller, more reactive pupil
            pupilScale = isMobile ? 
              (0.9 - (closenessFactor * 0.4)) : 
              (0.8 - (closenessFactor * 0.4));
              
            // More pronounced trembling
            const trembleAmplitude = closenessFactor * 2.5;
            const noiseX = Math.sin(Date.now() * 0.04) * trembleAmplitude;
            const noiseY = Math.cos(Date.now() * 0.05) * trembleAmplitude;
            trembleEffect = `translate(${noiseX}px, ${noiseY}px)`;
          } else {
            // Normal following when far
            const intensity = Math.min(1, distance / 180);
            finalPupilX = Math.cos(angle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(angle) * pupilMaxRadius * intensity;
            
            // Slightly enlarged pupil when far
            const farFactor = Math.min(1, (distance - closeThreshold) / 250);
            pupilScale = isMobile ? 
              (1.1 + (farFactor * 0.3)) : 
              (1.0 + (farFactor * 0.3));
          }
        }
        else if (stageLevel === 3) {
          // STAGE 3: Fleeing - jumps to opposite side
          if (distance < closeThreshold) {
            // Run to opposite side when cursor gets close
            const fleeStrength = closenessFactor * 1.3; // How strongly it flees
            
            // Compute fleeing angle - completely opposite direction
            finalAngle = angle + Math.PI; // 180 degrees away
            
            // Use maximum intensity when fleeing
            const intensity = 0.9 + (fleeStrength * 0.1); // Almost full extension
            finalPupilX = Math.cos(finalAngle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(finalAngle) * pupilMaxRadius * intensity;
            
            // Smaller pupil with squash effect
            pupilScale = isMobile ? 
              (0.8 - (closenessFactor * 0.4)) : 
              (0.7 - (closenessFactor * 0.4));
            
            // Add squash/stretch to pupil when fleeing
            const squashFactor = 1 + (closenessFactor * 0.2);
            const stretchDirection = Math.atan2(finalPupilY, finalPupilX);
            const squashX = 1 - Math.abs(Math.cos(stretchDirection) * closenessFactor * 0.2);
            const squashY = 1 - Math.abs(Math.sin(stretchDirection) * closenessFactor * 0.2);
            
            // Strong trembling
            const trembleAmplitude = closenessFactor * 3.5;
            const noiseX = Math.sin(Date.now() * 0.05) * trembleAmplitude;
            const noiseY = Math.cos(Date.now() * 0.06) * trembleAmplitude;
            trembleEffect = `translate(${noiseX}px, ${noiseY}px) scale(${squashX}, ${squashY})`;
            
            // Trigger a jump if very close
            if (closenessFactor > 0.7 && Math.random() < 0.05) {
              // Jump to a new position away from cursor
              const screenWidth = window.innerWidth;
              const screenHeight = window.innerHeight;
              
              // Calculate position on opposite side of screen from cursor
              const cursorAngle = Math.atan2(pointerY - screenHeight/2, pointerX - screenWidth/2);
              const jumpDistance = Math.min(screenWidth, screenHeight) * 0.4;
              const jumpAngle = cursorAngle + Math.PI + (Math.random() - 0.5);
              
              targetX = screenWidth/2 + Math.cos(jumpAngle) * jumpDistance;
              targetY = screenHeight/2 + Math.sin(jumpAngle) * jumpDistance;
              
              // Keep within screen bounds
              targetX = Math.max(50, Math.min(screenWidth - 50, targetX));
              targetY = Math.max(50, Math.min(screenHeight - 50, targetY));
              
              lastMoveTime = Date.now();
            }
          } else {
            // Twitchy following when far, still somewhat avoidant
            const intensity = Math.min(1, distance / 150);
            
            // Add some randomness to the tracking
            const jitterAngle = angle + (Math.random() - 0.5) * 0.3;
            finalPupilX = Math.cos(jitterAngle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(jitterAngle) * pupilMaxRadius * intensity;
            
            // Normal pupil size
            const farFactor = Math.min(1, (distance - closeThreshold) / 200);
            pupilScale = isMobile ? 
              (1.1 + (farFactor * 0.3)) : 
              (1.0 + (farFactor * 0.3));
          }
        }
        else if (stageLevel === 4) {
          // STAGE 4: Erratic - maximum reactivity and avoidance
          if (distance < closeThreshold * 1.5) { // Increased sensitivity range
            // Extremely avoidant behavior
            // Compute erratic angle - mix of opposite and random
            const randomOffset = (Math.random() - 0.5) * Math.PI; // Random jitter
            finalAngle = angle + Math.PI + randomOffset; // Opposite direction plus noise
            
            // Use extreme intensity with erratic behavior
            const intensity = 0.8 + (Math.random() * 0.2); // Random intensity
            finalPupilX = Math.cos(finalAngle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(finalAngle) * pupilMaxRadius * intensity;
            
            // Extremely reactive pupil
            const pulseFactor = Math.sin(Date.now() * 0.01) * 0.15; // Pulsing effect
            pupilScale = isMobile ? 
              (0.7 - (closenessFactor * 0.5) + pulseFactor) : 
              (0.6 - (closenessFactor * 0.5) + pulseFactor);
            
            // Violent trembling with multiple frequencies
            const trembleAmplitude = closenessFactor * 5.0;
            const noiseX = Math.sin(Date.now() * 0.07) * trembleAmplitude;
            const noiseY = Math.cos(Date.now() * 0.09) * trembleAmplitude;
            const jitterX = Math.sin(Date.now() * 0.15) * trembleAmplitude * 0.6;
            const jitterY = Math.cos(Date.now() * 0.17) * trembleAmplitude * 0.6;
            trembleEffect = `translate(${noiseX + jitterX}px, ${noiseY + jitterY}px)`;
            
            // Extremely jumpy behavior
            if (closenessFactor > 0.5 && Math.random() < 0.1) {
              // Panic jump to random position far from cursor
              const screenWidth = window.innerWidth;
              const screenHeight = window.innerHeight;
              
              // Calculate position far from cursor
              const jumpDistance = Math.min(screenWidth, screenHeight) * 0.6;
              const jumpAngle = Math.random() * Math.PI * 2;
              
              targetX = screenWidth/2 + Math.cos(jumpAngle) * jumpDistance;
              targetY = screenHeight/2 + Math.sin(jumpAngle) * jumpDistance;
              
              // Keep within screen bounds
              targetX = Math.max(50, Math.min(screenWidth - 50, targetX));
              targetY = Math.max(50, Math.min(screenHeight - 50, targetY));
              
              // Add some "panic" animation
              eyeball.classList.add('panicking');
              setTimeout(() => {
                eyeball.classList.remove('panicking');
              }, 300);
              
              lastMoveTime = Date.now();
            }
          } else {
            // Paranoid behavior even when far
            const randomJitter = (Math.random() - 0.5) * 0.5;
            finalAngle = angle + randomJitter;
            
            const intensity = Math.min(1, distance / 130) * (0.8 + Math.random() * 0.4);
            finalPupilX = Math.cos(finalAngle) * pupilMaxRadius * intensity;
            finalPupilY = Math.sin(finalAngle) * pupilMaxRadius * intensity;
            
            // Dilated, pulsing pupil
            const pulseFactor = Math.sin(Date.now() * 0.008) * 0.2;
            pupilScale = isMobile ? 
              (1.2 + pulseFactor) : 
              (1.1 + pulseFactor);
              
            // Subtle twitching even when far
            const twitchAmplitude = 1.2;
            const twitchX = Math.sin(Date.now() * 0.06) * twitchAmplitude;
            const twitchY = Math.cos(Date.now() * 0.07) * twitchAmplitude;
            trembleEffect = `translate(${twitchX}px, ${twitchY}px)`;
          }
        }
        
        // Handle stage transition animation
        if (isTransitioning) {
          const timeSinceTransition = Date.now() - lastStageChange;
          const transitionDuration = 500; // ms
          
          if (timeSinceTransition < transitionDuration) {
            // During transition, add elastic effect
            const progress = timeSinceTransition / transitionDuration;
            const elastic = Math.sin(progress * Math.PI * 3) * Math.pow(1 - progress, 2) * 15;
            
            // Add elastic bounce to pupil position
            finalPupilX += Math.cos(angle) * elastic;
            finalPupilY += Math.sin(angle) * elastic;
          } else {
            isTransitioning = false;
          }
        }
        
        // Apply final pupil position with dynamic scale and effects
        pupil.style.transform = `translate(calc(-50% + ${finalPupilX}px), calc(-50% + ${finalPupilY}px)) scale(${pupilScale}) ${trembleEffect}`;
        
        // Random repositioning happens less frequently at higher stages
        const repositionFactor = Math.max(0.1, 1 - (stageLevel * 0.2));
        if (Math.random() < repositionChance * repositionFactor && Date.now() - lastMoveTime > 2000) {
          // Choose a new random position
          const screenWidth = window.innerWidth;
          const screenHeight = window.innerHeight;
          
          targetX = Math.random() * (screenWidth - 100) + 50;
          targetY = Math.random() * (screenHeight - 100) + 50;
          
          lastMoveTime = Date.now();
        }
      }
      
      // Track mouse movement
      document.addEventListener('mousemove', (e) => {
        updatePupilPosition(e.clientX, e.clientY);
      });
      
      // Track touch movement for mobile
      document.addEventListener('touchmove', (e) => {
        if (e.touches && e.touches[0]) {
          updatePupilPosition(e.touches[0].clientX, e.touches[0].clientY);
          
          // Only prevent default if touching the eyeball
          if (e.target === eyeballContainer || eyeball.contains(e.target)) {
            e.preventDefault();
          }
        }
      });
      
      // Animation loop to update eyeball position
      function updatePosition() {
        // Add subtle ambient movement - varies by stage
        const ambientFactorByStage = [1.0, 1.2, 1.5, 2.0, 3.0];
        const currentAmbientFactor = ambientFactorByStage[stageLevel];
        
        ambientPhase += ambientSpeed * currentAmbientFactor;
        const ambientX = Math.sin(ambientPhase) * ambientRadius * currentAmbientFactor;
        const ambientY = Math.cos(ambientPhase * 1.3) * ambientRadius * currentAmbientFactor;
        
        // Move toward target position with springy easing - speed increases with stage
        const moveSpeedByStage = [0.08, 0.1, 0.12, 0.15, 0.2];
        const currentMoveSpeed = moveSpeedByStage[stageLevel];
        
        const dx = targetX - currentX;
        const dy = targetY - currentY;
        currentX += dx * currentMoveSpeed;
        currentY += dy * currentMoveSpeed;
      
        // Add subtle spring effect when changing directions - more dramatic at higher stages
        if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {
          const springFactor = 0.5 * (1 + stageLevel * 0.3);
          currentX += Math.sin(Date.now() * 0.01) * springFactor;
          currentY += Math.cos(Date.now() * 0.01) * springFactor;
        }
        
        // Update container position
        eyeballContainer.style.left = `${currentX + ambientX}px`;
        eyeballContainer.style.top = `${currentY + ambientY}px`;
        
        requestAnimationFrame(updatePosition);
      }
      
      // Start position animation
      updatePosition();
      
      // Simple blinking function
      function blink() {
        eyeball.classList.add('blinking');
        
        setTimeout(() => {
          eyeball.classList.remove('blinking');
        }, 200);
        
        // Schedule next blink
        setTimeout(blink, 3000 + Math.random() * 4000);
      }
      
      // Start blinking
      setTimeout(blink, 1000);
      
      // Initialize global click counter and create footer element
      let globalClickCount = 0;
      const clickCounterFooter = document.createElement('div');
      clickCounterFooter.className = 'click-counter';
      clickCounterFooter.style.position = 'fixed';
      clickCounterFooter.style.bottom = '10px';
      clickCounterFooter.style.left = '0';
      clickCounterFooter.style.width = '100%';
      clickCounterFooter.style.textAlign = 'center';
      clickCounterFooter.style.fontSize = '12px';
      clickCounterFooter.style.fontFamily = 'monospace';
      clickCounterFooter.style.color = '#555';
      clickCounterFooter.style.background = 'rgba(255, 255, 255, 0.7)';
      clickCounterFooter.style.padding = '3px 0';
      clickCounterFooter.style.borderTop = '1px solid rgba(0, 0, 0, 0.05)';
      clickCounterFooter.style.zIndex = '999';
      clickCounterFooter.style.pointerEvents = 'none';
      clickCounterFooter.innerHTML = '👁️ Total Eye Clicks: <span style="font-weight:bold">Loading...</span> <span style="color:#999;font-size:10px">(live)</span>';
      document.body.appendChild(clickCounterFooter);
      
      // Fetch initial click count from server
      fetch('/api/getClicks.json')
        .then(response => response.json())
        .then(data => {
          globalClickCount = data.clicks;
          updateClickDisplay();
        })
        .catch(error => {
          console.error('Error fetching click count:', error);
          clickCounterFooter.innerHTML = '👁️ Total Eye Clicks: <span style="font-weight:bold">0</span> <span style="color:#999;font-size:10px">(offline)</span>';
        });
        
      // Function to update click display
      function updateClickDisplay() {
        clickCounterFooter.innerHTML = `👁️ Total Eye Clicks: <span style="font-weight:bold">${globalClickCount}</span> <span style="color:#999;font-size:10px">(live)</span>`;
      }
      
      // Set up periodic refresh for the counter (every 10 seconds)
      setInterval(() => {
        fetch('/api/getClicks.json')
          .then(response => response.json())
          .then(data => {
            if (data.clicks !== globalClickCount) {
              globalClickCount = data.clicks;
              updateClickDisplay();
            }
          })
          .catch(error => console.error('Error refreshing click count:', error));
      }, 10000);
      
      // Click event for stage progression with distinct behaviors
      eyeballContainer.addEventListener('click', () => {
        // Update global click counter and footer (optimistic update)
        globalClickCount++;
        updateClickDisplay();
        
        // Add pulse animation to the counter
        clickCounterFooter.animate([
          { transform: 'scale(1)' },
          { transform: 'scale(1.1)' },
          { transform: 'scale(1)' }
        ], {
          duration: 300,
          easing: 'ease-out'
        });
        
        // Send click update to server
        fetch('/api/updateClicks.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          // Update with the server's count (in case of concurrent users)
          if (data.clicks !== globalClickCount) {
            globalClickCount = data.clicks;
            updateClickDisplay();
          }
        })
        .catch(error => console.error('Error updating click count:', error));
        
        // Transition to next stage
        const previousStage = stageLevel;
        stageLevel = (stageLevel + 1) % 5; // Cycle through 0-4
        
        // Simple reset animation when cycling back to stage 0
        if (previousStage === 4 && stageLevel === 0) {
          eyeball.animate([
            { transform: 'scale(1.0)' },
            { transform: 'scale(1.1)' },
            { transform: 'scale(0.95)' },
            { transform: 'scale(1.0)' }
          ], {
            duration: 400,
            easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)'
          });
        }
        
        lastStageChange = Date.now();
        isTransitioning = true;
        
        // Remove previous fear classes
        eyeball.classList.remove('stage-0', 'stage-1', 'stage-2', 'stage-3', 'stage-4');
        eyeball.classList.remove('nervous', 'anxious', 'scared', 'terrified', 'agony');
        
        // Add appropriate class for current stage
        eyeball.classList.add(`stage-${stageLevel}`);
        
        // Apply appropriate visual state based on stage
        if (stageLevel === 0) {
          // Reset to calm state
          eyeball.classList.add('calm');
          eyeball.style.backgroundColor = '#fffdf0'; // Consistent eye white color
        } else if (stageLevel === 1) {
          // Alert state
          eyeball.classList.add('nervous');
          eyeball.style.backgroundColor = '#fffdf0'; // Consistent eye white color
        } else if (stageLevel === 2) {
          // Avoidant state
          eyeball.classList.add('anxious');
          eyeball.style.backgroundColor = '#fffdf0'; // Consistent eye white color
        } else if (stageLevel === 3) {
          // Fleeing state
          eyeball.classList.add('scared');
          eyeball.style.backgroundColor = '#fffdf0'; // Consistent eye white color
        } else if (stageLevel === 4) {
          // Erratic state
          eyeball.classList.add('terrified');
          eyeball.style.backgroundColor = '#fffdf0'; // Consistent eye white color
          
          // For the final stage, add an elastic transition
          eyeball.animate([
            { transform: 'scale(1.2)' },
            { transform: 'scale(0.9)' },
            { transform: 'scale(1.1)' },
            { transform: 'scale(0.95)' },
            { transform: 'scale(1)' }
          ], {
            duration: 500,
            easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)'
          });
        }
        
        // Show stage indicators - escalating symbols ending with heart
        const stageIndicator = document.createElement('div');
        stageIndicator.className = 'stage-indicator';
        
        // Set different indicators based on stage
        if (stageLevel === 0) {
          stageIndicator.textContent = ''; // No indicator for initial state
        } else if (stageLevel === 1) {
          stageIndicator.textContent = '!'; // Single exclamation
          stageIndicator.style.color = '#ff0000'; // Red
        } else if (stageLevel === 2) {
          stageIndicator.textContent = '!!'; // Double exclamation
          stageIndicator.style.color = '#ff0000'; // Red
        } else if (stageLevel === 3) {
          stageIndicator.textContent = '!?!'; // More chaotic
          stageIndicator.style.color = '#ff0000'; // Red
        } else if (stageLevel === 4) {
          stageIndicator.textContent = '!!%@!'; // Most chaotic
          stageIndicator.style.color = '#ff0000'; // Red
        }
        
        stageIndicator.style.position = 'absolute';
        stageIndicator.style.top = '-20px';
        stageIndicator.style.left = '50%';
        stageIndicator.style.transform = 'translateX(-50%)';
        stageIndicator.style.background = 'transparent'; // No background
        stageIndicator.style.padding = '2px';
        stageIndicator.style.fontSize = '14px';
        stageIndicator.style.lineHeight = '16px';
        stageIndicator.style.textAlign = 'center';
        stageIndicator.style.zIndex = '1001';
        stageIndicator.style.opacity = '0';
        stageIndicator.style.animation = 'fadeInOut 1.5s forwards';
        stageIndicator.style.fontWeight = 'bold';
        stageIndicator.style.textShadow = '0px 0px 2px rgba(0,0,0,0.5)'; // Add shadow for visibility
        eyeballContainer.appendChild(stageIndicator);
        
        setTimeout(() => {
          if (stageIndicator.parentNode === eyeballContainer) {
            eyeballContainer.removeChild(stageIndicator);
          }
        }, 1500);
        
        // Change to a slightly different size for each stage
        const sizeFactorByStage = [1.0, 1.05, 1.1, 1.15, 1.2];
        currentSize = sizesRange.default * sizeFactorByStage[stageLevel];
        eyeballContainer.style.width = `${currentSize}px`;
        eyeballContainer.style.height = `${currentSize}px`;
        
        // Add animation to eyeball on click
        eyeball.classList.add('size-changing');
        
        setTimeout(() => {
          eyeball.classList.remove('size-changing');
        }, 500);
      });
      
      // Make the eyeball appear clickable
      eyeballContainer.style.cursor = 'pointer';
      eyeballContainer.style.pointerEvents = 'auto';
    }
  });
</script>

<style>
  /* Size changing animation */
  .eyeball.size-changing {
    animation: bounce 0.5s ease-out;
  }
  
  @keyframes bounce {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    75% { transform: scale(0.9); }
    100% { transform: scale(1); }
  }
  
  /* Stage-based animations */
  .eyeball.stage-0 {
    transition: transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    background-color: #fffdf0 !important;
  }
  
  .eyeball.stage-1, .eyeball.nervous {
    animation: nervousJitter 2s infinite;
    transition: transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    background-color: #fffdf0 !important;
  }
  
  .eyeball.stage-2, .eyeball.anxious {
    animation: anxiousShake 1s infinite;
    transition: transform 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
    background-color: #fffdf0 !important;
  }
  
  .eyeball.stage-3, .eyeball.scared {
    animation: scaredPulse 0.7s infinite alternate;
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    background-color: #fffdf0 !important;
  }
  
  .eyeball.stage-4, .eyeball.terrified {
    animation: terrifiedShake 0.3s infinite;
    transition: transform 0.25s cubic-bezier(0.34, 1.56, 0.64, 1);
    background-color: #fffdf0 !important;
  }
  
  .eyeball.panicking {
    animation: panic 0.3s ease-in-out;
  }
  
  @keyframes nervousJitter {
    0%, 100% { transform: translate(0, 0); }
    25% { transform: translate(-1px, 1px); }
    50% { transform: translate(1px, -1px); }
    75% { transform: translate(-1px, -1px); }
  }
  
  @keyframes anxiousShake {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(-2px, 1px) rotate(-1deg); }
    50% { transform: translate(2px, -1px) rotate(1deg); }
    75% { transform: translate(-2px, -1px) rotate(-1deg); }
  }
  
  @keyframes scaredPulse {
    0% { transform: scale(1); }
    100% { transform: scale(1.05); }
  }
  
  @keyframes terrifiedShake {
    0% { transform: translate(0, 0) rotate(0deg); }
    20% { transform: translate(-3px, 2px) rotate(-3deg); }
    40% { transform: translate(4px, -3px) rotate(3deg); }
    60% { transform: translate(-4px, -2px) rotate(-2deg); }
    80% { transform: translate(3px, 3px) rotate(2deg); }
    90% { transform: translate(-2px, 1px) rotate(-1deg); }
    100% { transform: translate(2px, 0px) rotate(0deg); }
  }
  
  @keyframes panic {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    75% { transform: scale(0.9); }
    100% { transform: scale(1); }
  }
  
  /* Agony animation */
  .eyeball.agony {
    animation: writhe 0.15s infinite alternate ease-in-out;
    box-shadow: 0 0 20px 5px rgba(255, 0, 0, 0.7);
    background-color: #fffdf0 !important;
  }

  .eyeball.agony .pupil {
    animation: dilate 0.1s infinite alternate ease-in-out;
    background-color: #ff3333 !important;
    box-shadow: 0 0 10px 3px rgba(255, 0, 0, 0.8) inset;
  }

  .eyeball.agony .veins {
    opacity: 0.6;
    animation: pulsate 0.3s infinite alternate;
    background-image: 
      radial-gradient(circle, transparent 55%, #ff0000 100%),
      linear-gradient(30deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%),
      linear-gradient(90deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%),
      linear-gradient(150deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%);
  }
  
  /* Stage indicator animation */
  @keyframes fadeInOut {
    0% { opacity: 0; transform: translateX(-50%) translateY(-5px) scale(0.8); }
    20% { opacity: 1; transform: translateX(-50%) translateY(0) scale(1.2); }
    40% { opacity: 1; transform: translateX(-50%) translateY(0) scale(1); }
    80% { opacity: 1; transform: translateX(-50%) translateY(0) scale(1); }
    100% { opacity: 0; transform: translateX(-50%) translateY(5px) scale(0.8); }
  }
  


  @keyframes writhe {
    0% { transform: scale(1.3) rotate(-20deg); }
    20% { transform: scale(0.8) rotate(25deg); }
    40% { transform: scale(1.4) rotate(-15deg); }
    60% { transform: scale(0.7) rotate(30deg); }
    80% { transform: scale(1.35) rotate(-25deg); }
    90% { transform: scale(1.1) rotate(10deg); }
    100% { transform: scale(1.2) rotate(-5deg); }
  }

  @keyframes dilate {
    0% { transform: translate(-50%, -50%) scale(1.8); border-radius: 20%; }
    33% { transform: translate(-55%, -45%) scale(0.5); border-radius: 60%; }
    66% { transform: translate(-45%, -55%) scale(1.5); border-radius: 30%; }
    100% { transform: translate(-50%, -50%) scale(0.6); border-radius: 40%; }
  }

  @keyframes pulse {
    0% { opacity: 0.3; transform: scale(0.9); }
    100% { opacity: 0.7; transform: scale(1.1); }
  }

  @keyframes pulsate {
    0% { opacity: 0.4; }
    100% { opacity: 0.8; }
  }

  .eyeball-container {
      position: fixed;
      width: 48px; /* Increased by ~37% from 35px */
      height: 48px; /* Increased by ~37% from 35px */
      z-index: 1000;
      pointer-events: auto;
      cursor: pointer;
      will-change: left, top, transform;
      transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1), width 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), height 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
      touch-action: none;
    }
  
  .eyeball-container:hover {
    transform: scale(1.1);
  }
  
  .eyeball-container:active {
    transform: scale(0.95);
  }
  
  .eyeball {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: #fffdf0 !important; /* Force consistent eye white color */
    border-radius: 50%;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    transform-origin: center;
    transition: transform 0.15s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  
  .eyeball.blinking:before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background-color: #fff;
    z-index: 5;
    animation: blink 0.2s ease-in-out;
  }
  
  .pupil {
    position: absolute;
    width: 32%;
    height: 32%;
    background-color: #000;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1);
    transition: transform 0.25s cubic-bezier(0.34, 1.56, 0.64, 1);
    z-index: 3;
    will-change: transform, scale;
    box-shadow: 0 0 2px rgba(0, 0, 0, 0.5) inset;
  }
  
  /* Stage-specific pupil styling */
  .stage-1 .pupil {
    transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  
  .stage-2 .pupil {
    transition: transform 0.15s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  
  .stage-3 .pupil {
    transition: transform 0.1s cubic-bezier(0.5, 0, 0.75, 0);
  }
  
  .stage-4 .pupil {
    transition: transform 0.08s linear;
  }
  
  .veins {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    opacity: 0.18;
    background: radial-gradient(circle, transparent 65%, #ff3000 100%);
    background-image: 
      radial-gradient(circle, transparent 65%, #ff3000 100%),
      linear-gradient(30deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%),
      linear-gradient(90deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%),
      linear-gradient(150deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%);
    pointer-events: none;
    z-index: 1;
  }
  
  .sclera {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: 
      radial-gradient(circle at 30% 30%, rgba(255,255,255,0.5) 0%, transparent 30%),
      radial-gradient(circle at 70% 70%, rgba(255,255,240,0.5) 0%, transparent 20%);
    z-index: 2;
    pointer-events: none;
  }

  @keyframes blink {
    0%, 100% { height: 0%; top: 50%; }
    50% { height: 100%; top: 0%; }
  }
</style>