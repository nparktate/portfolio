---
---

<div class="eyeball-container" id="eyeball-container">
  <div class="eyeball" id="eyeball">
    <div class="veins"></div>
    <div class="sclera"></div>
    <div class="pupil" id="pupil"></div>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const pupil = document.getElementById('pupil');
    const eyeball = document.getElementById('eyeball');
    const eyeballContainer = document.getElementById('eyeball-container');
    
    if (pupil && eyeball && eyeballContainer) {
      // Set initial position randomly on screen
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const initialX = Math.random() * (screenWidth - 200) + 100;
      const initialY = Math.random() * (screenHeight - 200) + 100;
      
      // Initialize position
      eyeballContainer.style.top = initialY + 'px';
      eyeballContainer.style.left = initialX + 'px';
      
      // Variables for movement
      let targetX = initialX;
      let targetY = initialY;
      let currentX = initialX;
      let currentY = initialY;
      let lastMoveTime = 0;
      let lastPointerX = initialX;
      let lastPointerY = initialY;
      let ambientPhase = 0;
      let isMobile = false;
      
      // Fear level tracking variables
      let fearLevel = 0; // 0=normal, 1=nervous, 2=anxious, 3=scared, 4=terrified, 5=agony
      let avoidanceFactor = 0; // Increases with fear level
      let lastCursorDistance = 0;
      
      // Check if device is mobile
      isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      // Constants
      const moveSpeed = 0.08;
      const repositionChance = 0.005;
      const edgeBuffer = 50;
      const ambientSpeed = 0.003; // Increased for smoother animation
      const ambientRadius = 8;
      const fearThreshold = 300; // Distance at which fear response triggers
      
      // Size configuration for random sizing
      const sizesRange = {
        min: 30,
        max: 60,
        default: 40
      };
      let currentSize = sizesRange.default;
      
      // Click counter for easter egg
      let clickCount = 0;
      let agonyTimeout = null;
      
      // Function to set a random size
      function setRandomSize() {
        // Generate random size within range
        currentSize = Math.floor(Math.random() * (sizesRange.max - sizesRange.min + 1)) + sizesRange.min;
        eyeballContainer.style.width = `${currentSize}px`;
        eyeballContainer.style.height = `${currentSize}px`;
      }
      
      // Function to update pupil position
      function updatePupilPosition(pointerX, pointerY) {
        lastPointerX = pointerX;
        lastPointerY = pointerY;
        
        // Update pupil position to follow pointer
        const eyeRect = eyeball.getBoundingClientRect();
        const eyeCenterX = eyeRect.left + eyeRect.width / 2;
        const eyeCenterY = eyeRect.top + eyeRect.height / 2;
        
        const deltaX = pointerX - eyeCenterX;
        const deltaY = pointerY - eyeCenterY;
        
        // Calculate angle and distance
        const angle = Math.atan2(deltaY, deltaX);
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        lastCursorDistance = distance;
        
        // Update fear response based on cursor proximity
        if (fearLevel > 0 && distance < fearThreshold) {
          // Apply fear behaviors based on level
          if (fearLevel >= 2) {
            // Level 2+: Try to move away from cursor with increasing intensity
            const avoidAngle = angle + Math.PI; // Opposite direction
            const avoidFactor = (fearLevel * 0.5) * (1 - Math.min(1, distance / fearThreshold));
            const avoidX = Math.cos(avoidAngle) * (100 * avoidFactor);
            const avoidY = Math.sin(avoidAngle) * (100 * avoidFactor);
            
            targetX += avoidX;
            targetY += avoidY;
            
            // Keep within screen bounds
            targetX = Math.max(50, Math.min(window.innerWidth - 50, targetX));
            targetY = Math.max(50, Math.min(window.innerHeight - 50, targetY));
            
            lastMoveTime = Date.now();
          }
          
          // Visual fear response
          if (fearLevel >= 1) {
            // Add increasing jitter to the eyeball
            eyeball.style.setProperty('--jitter-intensity', fearLevel);
            
            if (!eyeball.classList.contains('jittering')) {
              eyeball.classList.add('jittering');
              setTimeout(() => {
                eyeball.classList.remove('jittering');
              }, 300);
            }
          }
        }
        
        // Determine pupil size based on distance and fear level
        const closeThreshold = 150; // Distance at which pupil begins to constrict
        let pupilScale = 1.0;
        
        if (distance < closeThreshold) {
          // Pupil gets smaller as cursor gets closer
          const constrictionFactor = Math.max(0.4, distance / closeThreshold);
          pupilScale = constrictionFactor;
          
          // Fear level affects pupil more dramatically
          if (fearLevel >= 3) {
            // More extreme pupil response for higher fear levels
            pupilScale = Math.max(0.3, pupilScale - (fearLevel * 0.05));
          }
        } else if (fearLevel >= 4) {
          // Terrified - rapidly dilating pupil
          pupilScale = 1.2 + Math.sin(Date.now() * 0.01) * 0.3;
        }
        
        // Move pupil based on pointer position
        const pupilMaxRadius = eyeRect.width * 0.22;
        const intensity = Math.min(1, distance / 400);
        const pupilRadius = pupilMaxRadius * intensity;
        const pupilX = Math.cos(angle) * pupilRadius;
        const pupilY = Math.sin(angle) * pupilRadius;
        
        // Apply pupil position and scale
        pupil.style.transform = `translate(calc(-50% + ${pupilX}px), calc(-50% + ${pupilY}px)) scale(${pupilScale})`;
        
        // Randomly reposition the eyeball occasionally - less likely when afraid
        const fearAdjustedChance = Math.max(0, repositionChance - (fearLevel * 0.001));
        if (Math.random() < fearAdjustedChance && Date.now() - lastMoveTime > 2000) {
          // Choose a new random position
          const screenWidth = window.innerWidth;
          const screenHeight = window.innerHeight;
          
          targetX = Math.random() * (screenWidth - 100) + 50;
          targetY = Math.random() * (screenHeight - 100) + 50;
          
          lastMoveTime = Date.now();
        }
      }
      
      // Track mouse movement
      document.addEventListener('mousemove', (e) => {
        updatePupilPosition(e.clientX, e.clientY);

      });
      
      // Track touch movement for mobile
      document.addEventListener('touchmove', (e) => {
        if (e.touches && e.touches[0]) {
          updatePupilPosition(e.touches[0].clientX, e.touches[0].clientY);
          

          
          e.preventDefault(); // Prevent scrolling while tracking touch
        }
      });
      
      // Initial touch position
      document.addEventListener('touchstart', (e) => {
        if (e.touches && e.touches[0]) {
          updatePupilPosition(e.touches[0].clientX, e.touches[0].clientY);
        }
      });
      
      // Animation loop to update eyeball position with ambient movement
      function updatePosition() {
        // Add subtle ambient movement - more erratic with higher fear
        ambientPhase += ambientSpeed * (1 + (fearLevel * 0.5));
        const fearFactor = Math.max(1, fearLevel);
        const ambientX = Math.sin(ambientPhase) * ambientRadius * fearFactor;
        const ambientY = Math.cos(ambientPhase * 1.3) * ambientRadius * fearFactor;
        
        // Move toward target position with easing - faster when afraid
        const fearAdjustedSpeed = moveSpeed * (1 + (fearLevel * 0.15));
        currentX += (targetX - currentX) * fearAdjustedSpeed;
        currentY += (targetY - currentY) * fearAdjustedSpeed;
        
        // Update container position with fear-affected ambient movement
        eyeballContainer.style.left = `${currentX + ambientX}px`;
        eyeballContainer.style.top = `${currentY + ambientY}px`;
        eyeballContainer.style.transition = 'none'; // Remove transition for smoother animation
        
        // If no pointer movement on mobile, make the pupil follow ambient motion
        if (isMobile && Date.now() - lastMoveTime > 5000) {
          // Get eye center
          const eyeRect = eyeball.getBoundingClientRect();
          const eyeCenterX = eyeRect.left + eyeRect.width / 2;
          const eyeCenterY = eyeRect.top + eyeRect.height / 2;
          
          // Gentle looking around
          const lookX = eyeCenterX + ambientX * 5;
          const lookY = eyeCenterY + ambientY * 5;
          
          updatePupilPosition(lookX, lookY);
        }
        
        requestAnimationFrame(updatePosition);
      }
      
      // Start position animation
      updatePosition();
      
      // Simple blinking function
      function blink() {
        eyeball.classList.add('blinking');
        
        setTimeout(() => {
          eyeball.classList.remove('blinking');
        }, 200);
        
        // Schedule next blink
        setTimeout(blink, 3000 + Math.random() * 4000);
      }
      
      // Start blinking
      setTimeout(blink, 1000);
      
      // Add click event to change size and position
      eyeballContainer.addEventListener('click', () => {
        // Increment click counter
        clickCount++;
        
        // Update fear level based on click count (1-4 for fear stages, 5 for agony)
        fearLevel = clickCount;
        
        // Apply appropriate fear class based on level
        eyeball.classList.remove('nervous', 'anxious', 'scared', 'terrified');
        
        // Add fear status message
        const showStatusMessage = (text, color) => {
          const statusText = document.createElement('div');
          statusText.innerText = text;
          statusText.style.position = 'absolute';
          statusText.style.color = color;
          statusText.style.fontWeight = 'bold';
          statusText.style.fontSize = '16px';
          statusText.style.textShadow = '0 0 3px white';
          statusText.style.zIndex = '1000';
          statusText.style.top = (currentY - 30) + 'px';
          statusText.style.left = (currentX) + 'px';
          statusText.style.animation = 'fadeOutUp 1.5s forwards';
          document.body.appendChild(statusText);
          
          setTimeout(() => {
            document.body.removeChild(statusText);
          }, 1500);
        };
        
        // Check for agony easter egg
        if (clickCount === 5) {
          // Trigger agony animation
          eyeball.classList.add('agony');
          
          // Play agony sound
          const agonyAudio = new Audio();
          agonyAudio.volume = 0.25; // Slightly louder
          agonyAudio.src = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA/+M4wAAAAAAAAAAAAEluZm8AAAAPAAAAEwAAAHwAVVVVVVVVVVVVVVVVVVVVgICAgICAgICAgICAgICAgICqqqqqqqqqqqqqqqqqqqqqwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV4ODg4ODg4ODg4ODg4ODg4OD/////////////////////////////////AAAAAExhdmM1OC4xMwAAAAAAAAAAAAAAACQEOAAAAAAAAAB8nx5ywQAAAAAAAAAAAAAAAAAAAAAA";
          agonyAudio.play().catch(e => console.log("Audio play prevented: ", e));
    
          // Create text element for dramatic effect
          const agonyText = document.createElement('div');
          agonyText.innerText = 'AGONY!';
          agonyText.style.position = 'absolute';
          agonyText.style.color = 'red';
          agonyText.style.fontWeight = 'bold';
          agonyText.style.fontSize = '24px';
          agonyText.style.textShadow = '0 0 5px black';
          agonyText.style.zIndex = '1000';
          agonyText.style.top = (currentY - 40) + 'px';
          agonyText.style.left = (currentX) + 'px';
          agonyText.style.animation = 'fadeOutUp 2s forwards';
          document.body.appendChild(agonyText);
    
          // Remove the text element after animation
          setTimeout(() => {
            document.body.removeChild(agonyText);
          }, 2000);
          
          // Reset after agony animation completes
          if (agonyTimeout) {
            clearTimeout(agonyTimeout);
          }
    
          // Add intense shaking to container during agony
          eyeballContainer.style.animation = "shake 0.1s infinite";
    
          // Erratic movement during agony
          const agonyMovement = setInterval(() => {
            const jitterX = Math.random() * 20 - 10;
            const jitterY = Math.random() * 20 - 10;
      
            currentX += jitterX;
            currentY += jitterY;
      
            // Keep within screen bounds
            currentX = Math.max(50, Math.min(window.innerWidth - 50, currentX));
            currentY = Math.max(50, Math.min(window.innerHeight - 50, currentY));
          }, 150);
    
          agonyTimeout = setTimeout(() => {
            eyeball.classList.remove('agony');
            eyeballContainer.style.animation = "";
            clickCount = 0;
            fearLevel = 0;
            clearInterval(agonyMovement);
          }, 5000); // Longer duration for more dramatic effect
          
          return; // Skip normal click behavior
        } else if (clickCount === 1) {
          // First click - becoming nervous
          eyeball.classList.add('nervous');
          showStatusMessage('Nervous...', '#FFA500');
          
          // Play subtle nervous sound
          const nervousAudio = new Audio();
          nervousAudio.volume = 0.1;
          nervousAudio.src = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA/+M4wAAAAAAAAAAAAEluZm8AAAAPAAAAAwAAAbAAkJCQkJCQkJCQkJCQkJCQwMDAwMDAwMDAwMDAwMDAwMD/////////////////////////////////AAAAAExhdmM1OC4xMwAAAAAAAAAAAAAAACQCkAAAAAAAAAGwuTR9zgAAAAAAAAAAAAAAAAAAAAAA";
          nervousAudio.play().catch(e => console.log("Audio play prevented: ", e));
        } else if (clickCount === 2) {
          // Second click - becoming anxious
          eyeball.classList.add('anxious');
          showStatusMessage('Anxious!', '#FFA500');
        } else if (clickCount === 3) {
          // Third click - becoming scared
          eyeball.classList.add('scared');
          showStatusMessage('Scared!', '#FF6347');
        } else if (clickCount === 4) {
          // Fourth click - becoming terrified
          eyeball.classList.add('terrified');
          showStatusMessage('Terrified!', '#FF0000');
          
          // Play terrified sound
          const scaredAudio = new Audio();
          scaredAudio.volume = 0.15;
          scaredAudio.src = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA/+M4wAAAAAAAAAAAAEluZm8AAAAPAAAABAAAAVAAICAgICAgICAgICAgIEBAQEBAQEBAQEBAQEBAYGBgYGBgYGBgYGBgYGBggICAgICAgICAgICAgICA/////////////////////////////////AAAAAExhdmM1OC4xMwAAAAAAAAAAAAAAACQDUAAAAAAAAAFQEbBGTQAAAAAAAAAAAAAAAAAAAAAA";
          scaredAudio.play().catch(e => console.log("Audio play prevented: ", e));
        }
        
        // Normal click behavior (only if not triggering agony)
        // Change to a random size - smaller when afraid
        setRandomSize();
        
        // Move to a random position on screen
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        
        targetX = Math.random() * (screenWidth - 100) + 50;
        targetY = Math.random() * (screenHeight - 100) + 50;
        
        // Add animation to eyeball on click
        eyeball.classList.add('size-changing');
        
        // Play subtle click sound
        const audio = new Audio();
        audio.volume = 0.1;
        audio.src = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA/+M4wAAAAAAAAAAAAEluZm8AAAAPAAAAAwAAAbAAkJCQkJCQkJCQkJCQkJCQwMDAwMDAwMDAwMDAwMDAwMD/////////////////////////////////AAAAAExhdmM1OC4xMwAAAAAAAAAAAAAAACQCkAAAAAAAAAGwuTR9zgAAAAAAAAAAAAAAAAAAAAAA";
        audio.play().catch(e => console.log("Audio play prevented: ", e));
        
        setTimeout(() => {
          eyeball.classList.remove('size-changing');
        }, 500);
      });
      
      // Make the eyeball appear clickable
      eyeballContainer.style.cursor = 'pointer';
      // Remove pointer-events: none to allow clicks
      eyeballContainer.style.pointerEvents = 'auto';
    }
  });
</script>

<style>
  /* Size changing animation */
  .eyeball.size-changing {
    animation: bounce 0.5s ease-out;
  }
  
  @keyframes bounce {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    75% { transform: scale(0.9); }
    100% { transform: scale(1); }
  }
  
  @keyframes shake {
    0% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(-4px, 3px) rotate(-5deg); }
    50% { transform: translate(5px, -2px) rotate(5deg); }
    75% { transform: translate(-3px, -5px) rotate(-3deg); }
    100% { transform: translate(4px, 4px) rotate(4deg); }
  }
  
  /* Fear state animations */
  .eyeball.nervous {
    animation: nervousJitter 2s infinite;
  }
  
  .eyeball.anxious {
    animation: anxiousShake 1s infinite;
  }
  
  .eyeball.scared {
    animation: scaredPulse 0.7s infinite alternate;
  }
  
  .eyeball.terrified {
    animation: terrifiedShake 0.3s infinite;
  }
  
  @keyframes nervousJitter {
    0%, 100% { transform: translate(0, 0); }
    25% { transform: translate(-1px, 1px); }
    50% { transform: translate(1px, -1px); }
    75% { transform: translate(-1px, -1px); }
  }
  
  @keyframes anxiousShake {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(-2px, 1px) rotate(-1deg); }
    50% { transform: translate(2px, -1px) rotate(1deg); }
    75% { transform: translate(-2px, -1px) rotate(-1deg); }
  }
  
  @keyframes scaredPulse {
    0% { transform: scale(1); box-shadow: 0 0 5px rgba(255, 150, 0, 0.2); }
    100% { transform: scale(1.05); box-shadow: 0 0 10px rgba(255, 100, 0, 0.4); }
  }
  
  @keyframes terrifiedShake {
    0% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(-3px, 2px) rotate(-2deg); }
    50% { transform: translate(3px, -2px) rotate(2deg); }
    75% { transform: translate(-3px, -2px) rotate(-2deg); }
    100% { transform: translate(3px, 2px) rotate(2deg); }
  }
  
  /* Agony animation */
  .eyeball.agony {
    animation: writhe 0.15s infinite alternate ease-in-out;
    box-shadow: 0 0 20px 5px rgba(255, 0, 0, 0.7);
  }

  .eyeball.agony .pupil {
    animation: dilate 0.1s infinite alternate ease-in-out;
    background-color: #ff3333 !important;
    box-shadow: 0 0 10px 3px rgba(255, 0, 0, 0.8) inset;
  }

  .eyeball.agony .veins {
    opacity: 0.6;
    animation: pulsate 0.3s infinite alternate;
    background-image: 
      radial-gradient(circle, transparent 55%, #ff0000 100%),
      linear-gradient(30deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%),
      linear-gradient(90deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%),
      linear-gradient(150deg, transparent 45%, rgba(255,0,0,0.4) 50%, transparent 55%);
  }

  .eyeball.agony:before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(255,0,0,0.4) 0%, transparent 70%);
    z-index: 2;
    animation: pulse 0.5s infinite alternate;
  }

  @keyframes writhe {
    0% { transform: scale(1.3) rotate(-20deg); filter: hue-rotate(0deg) contrast(1.5); }
    25% { transform: scale(0.8) rotate(25deg); filter: hue-rotate(45deg) contrast(1.2); }
    50% { transform: scale(1.4) rotate(-15deg); filter: hue-rotate(90deg) contrast(1.7); }
    75% { transform: scale(0.7) rotate(30deg); filter: hue-rotate(135deg) contrast(1.3); }
    100% { transform: scale(1.35) rotate(-25deg); filter: hue-rotate(180deg) contrast(1.6); }
  }

  @keyframes dilate {
    0% { transform: translate(-50%, -50%) scale(1.8); border-radius: 20%; }
    33% { transform: translate(-55%, -45%) scale(0.5); border-radius: 60%; }
    66% { transform: translate(-45%, -55%) scale(1.5); border-radius: 30%; }
    100% { transform: translate(-50%, -50%) scale(0.6); border-radius: 40%; }
  }

  @keyframes pulse {
    0% { opacity: 0.3; transform: scale(0.9); }
    100% { opacity: 0.7; transform: scale(1.1); }
  }

  @keyframes pulsate {
    0% { opacity: 0.4; }
    100% { opacity: 0.8; }
  }

  .eyeball-container {
    position: fixed;
    width: 40px;
    height: 40px;
    z-index: 100;
    pointer-events: auto; /* Allow clicking */
    cursor: pointer; /* Show it's clickable */
    will-change: left, top;
    transition: transform 0.2s ease;
  }
  
  .eyeball-container:hover {
    transform: scale(1.1);
  }
  
  .eyeball-container:active {
    transform: scale(0.95);
  }
  
  .eyeball {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: #fffdf0;
    border-radius: 50%;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    transform-origin: center;
    transition: transform 0.1s ease-out, box-shadow 0.3s ease;
  }
  
  .eyeball.jiggling {
    animation: jiggle 0.3s ease-in-out;
    animation-iteration-count: 1;
    --jiggle-intensity: 1;
  }
  
  /* Pupil states for different fear levels */
  .eyeball.nervous .pupil {
    transition: transform 0.1s ease-out, scale 0.15s ease-out;
  }
  
  .eyeball.anxious .pupil {
    transition: transform 0.08s ease-out, scale 0.1s ease-out;
  }
  
  .eyeball.scared .pupil {
    transition: transform 0.05s ease-out, scale 0.08s ease-out;
    animation: pupilPulse 0.5s infinite alternate;
  }
  
  .eyeball.terrified .pupil {
    transition: transform 0.03s linear, scale 0.05s linear;
    animation: pupilTwitch 0.3s infinite alternate;
  }
  
  @keyframes pupilPulse {
    0% { transform: translate(-50%, -50%) scale(0.8); }
    100% { transform: translate(-50%, -50%) scale(1.1); }
  }
  
  @keyframes pupilTwitch {
    0% { transform: translate(calc(-50% - 2px), calc(-50% - 2px)) scale(0.7); }
    25% { transform: translate(calc(-50% + 3px), calc(-50% - 1px)) scale(1.2); }
    50% { transform: translate(calc(-50% - 1px), calc(-50% + 3px)) scale(0.9); }
    75% { transform: translate(calc(-50% + 2px), calc(-50% + 1px)) scale(1.3); }
    100% { transform: translate(calc(-50% - 3px), calc(-50% - 3px)) scale(0.8); }
  }
  
  .eyeball.blinking:before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background-color: #fff;
    z-index: 5;
    animation: blink 0.2s ease-in-out;
  }
  
  .pupil {
    position: absolute;
    width: 40%;
    height: 40%;
    background-color: #000;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: transform 0.08s ease-out, scale 0.15s ease-out;
    z-index: 3;
    will-change: transform;
  }
  
  .veins {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    opacity: 0.18;
    background: radial-gradient(circle, transparent 65%, #ff3000 100%);
    background-image: 
      radial-gradient(circle, transparent 65%, #ff3000 100%),
      linear-gradient(30deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%),
      linear-gradient(90deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%),
      linear-gradient(150deg, transparent 49.5%, rgba(255,0,0,0.1) 50%, transparent 50.5%);
    pointer-events: none;
    z-index: 1;
  }
  
  .sclera {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: 
      radial-gradient(circle at 30% 30%, rgba(255,255,255,0.5) 0%, transparent 30%),
      radial-gradient(circle at 70% 70%, rgba(255,255,240,0.5) 0%, transparent 20%);
    z-index: 2;
    pointer-events: none;
  }
  
  @keyframes quickBlink {
    0% { height: 0; top: 50%; opacity: 1; }
    50% { height: 100%; top: 0; opacity: 1; }
    100% { height: 0; top: 50%; opacity: 1; }
  }
  
  @keyframes jiggle {
    0% { transform: rotate(0deg) scale(1); }
    15% { transform: rotate(calc(var(--jiggle-intensity) * -4deg)) scale(calc(1 + var(--jiggle-intensity) * 0.05)); }
    32% { transform: rotate(calc(var(--jiggle-intensity) * 3deg)) scale(calc(1 - var(--jiggle-intensity) * 0.03)); }
    50% { transform: rotate(calc(var(--jiggle-intensity) * -2deg)) scale(calc(1 + var(--jiggle-intensity) * 0.02)); }
    65% { transform: rotate(calc(var(--jiggle-intensity) * 1deg)) scale(calc(1 - var(--jiggle-intensity) * 0.01)); }
    85% { transform: rotate(calc(var(--jiggle-intensity) * -0.5deg)) scale(1); }
    100% { transform: rotate(0deg) scale(1); }
  }
  

  
  /* Animation for pupil when scared */
  @keyframes blink {
    0%, 100% { height: 0%; top: 50%; }
    50% { height: 100%; top: 0%; }
  }

  @keyframes fadeOutUp {
    0% { opacity: 1; transform: translateY(0); }
    100% { opacity: 0; transform: translateY(-50px); }
  }
</style>