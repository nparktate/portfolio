---
export interface Props {
  title?: string;
  description?: string;
}

const { title = "Nicholas Park â€” Motion Designer", description = "Motion Designer & Creative Technologist" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  
  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
  
  <!-- Grid overlay styles -->
  <style>
    :root {
      --grid-size: 4px;
      --grid-columns: 16;
    }
    
    .grid-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
      z-index: 9999;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .grid-overlay.active {
      opacity: 1;
    }
    
    .grid-overlay::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        linear-gradient(to right, rgba(255,0,0,0.1) 1px, transparent 1px),
        linear-gradient(to bottom, rgba(255,0,0,0.1) 1px, transparent 1px);
      background-size: var(--grid-size) var(--grid-size);
    }
    
    .grid-columns {
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      max-width: 1280px;
      height: 100%;
      background-image: repeating-linear-gradient(
        to right,
        rgba(0,255,0,0.1) 0px,
        rgba(0,255,0,0.1) 1px,
        transparent 1px,
        transparent calc(100% / var(--grid-columns))
      );
    }
    
    html, body {
      scroll-behavior: smooth;
    }
    
    /* Perfect grid alignment for everything */
    * {
      box-sizing: border-box;
    }
    
    .folder-grid {
      display: grid;
      grid-template-columns: repeat(16, minmax(0, 1fr));
      gap: 16px;
      max-width: 1280px;
      margin: 0 auto;
      padding: 0 16px;
    }
    
    .grid-debug {
      outline: 1px solid rgba(255, 0, 0, 0.2);
    }
  </style>
</head>
<body class="h-full bg-white text-gray-900 font-sans antialiased">
  <!-- Grid overlay for development -->
  <div id="grid-overlay" class="grid-overlay">
    <div class="grid-columns"></div>
  </div>
  
  <!-- Main content -->
  <main class="min-h-full">
    <slot />
  </main>
  
  <!-- Grid toggle for development -->
  <div class="fixed bottom-4 right-4 z-50">
    <button 
      id="grid-toggle" 
      class="w-12 h-12 bg-gray-900 text-white rounded font-mono text-xs hover:bg-gray-700 transition-colors"
      title="Toggle Grid Overlay"
    >
      GRID
    </button>
  </div>
  
  <script>
    // Grid overlay toggle
    const gridToggle = document.getElementById('grid-toggle');
    const gridOverlay = document.getElementById('grid-overlay');
    let gridVisible = false;
    
    gridToggle?.addEventListener('click', () => {
      gridVisible = !gridVisible;
      gridOverlay?.classList.toggle('active', gridVisible);
    });
    
    // Keyboard shortcut: G key
    document.addEventListener('keydown', (e) => {
      if (e.key.toLowerCase() === 'g' && !e.metaKey && !e.ctrlKey && !e.altKey) {
        const activeElement = document.activeElement;
        if (activeElement?.tagName !== 'INPUT' && activeElement?.tagName !== 'TEXTAREA') {
          gridVisible = !gridVisible;
          gridOverlay?.classList.toggle('active', gridVisible);
        }
      }
    });
  </script>
</body>
</html>